@page "/"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CustomAuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@using WebApp.Components
@using Microsoft.AspNetCore.Components.Web

<!-- Search Bar -->
<div class="search-bar">
    <input 
        @bind-value="SearchQuery"
        @bind-value:event="oninput"
        class="search-input" 
        placeholder="What are you looking for?" 
        @onkeydown="OnSearch"
    />
    <button 
        class="btn btn-primary" 
        @onclick="OnSearch"
    >
        <i class="fas fa-search"></i> Search
    </button>
    <button 
        class="btn btn-secondary" 
        @onclick="OnClear"
    >
        <i class="fas fa-times"></i> Clear
    </button>
</div>

<!-- Search Results -->
@if (searchResults.Any())
{
    <div class="search-results">
        <ul>
            @foreach (var result in searchResults)
            {
                <li @onclick="() => NavigateTo(result.NavigationPath)">
                    <strong>@result.Title</strong>
                    <p>@result.Description</p>
                </li>
            }
        </ul>
    </div>
}
else if (!string.IsNullOrWhiteSpace(SearchQuery))
{
    <p class="no-results">No results found for "@SearchQuery"</p>
}


<!-- Welcome Message -->
@if (isUserLoggedIn)
{
    <div class="welcome-message">
        <h2>Welcome, @userFirstName!</h2>
        @* <p>We’re glad to see you again. Let's make today productive!</p> *@
    </div>
}

<!-- Feature Icons Grid -->
<div class="custom-grid">
    <div class="grid-item blue">
        <a href="/health-overview">
            <img src="images/health-graph-icon.png" alt="Health Overview" />
        </a>
    </div>
    <div class="grid-item yellow">
        <a href="/mole-tracking">
            <img src="images/mole-icon.png" alt="Mole Tracking" class="custom-img" />
        </a>
    </div>

    <!-- Conditional rendering for Medical Image access -->
    <div class="grid-item green @(userType == "Basic" ? "grayed-out" : "")">
        @if (userType == "Premium")
        {
            <a href="/image-analysis">
                <img src="images/medical-image-icon.png" alt="Image Analysis" class="custom-img" />
            </a>
        }
        else if (userType == "Basic" && isUserLoggedIn)
        {
            <div class="grid-item green disabled-feature" @onclick="ShowUpgradeModal">
                <div class="ribbon">Go Premium</div>
                <img src="images/medical-image-icon.png" alt="Medical Images" class="custom-img" />
            </div>
        }
    </div>

    <div class="grid-item red">
        <a href="/alerts">
            <img src="images/health-alert-icon.png" alt="Alerts" class="custom-img" />
        </a>
    </div>
</div>

<!-- Emergency Call Button -->
<div class="emergency-call">
    @if (!string.IsNullOrWhiteSpace(EmergencyContact))
    {
        <a href="tel:@EmergencyContact" class="btn btn-danger emergency-button">
            Emergency Call <i class="fas fa-phone"></i>
        </a>
    }
    else
    {
        <p class="no-emergency-contact">
            <i class="fas fa-exclamation-circle"></i> No emergency contact available. Please update your profile.
        </p>
    }
</div>

@* <!-- Debug Button -->
<div class="debug-button">
    <button @onclick="LogEmergencyContact" class="btn btn-secondary">Log Emergency Contact</button>
</div> *@

@if (isUpgradeModalVisible)
{
    <UpgradeModal 
        OnClose="CloseUpgradeModal" 
        OnUpgrade="UpgradeToPremium" 
    />
}

<!-- Footer -->
<footer class="footer">
    <p>&copy; @DateTime.Now.Year Mobile Health App</p>
</footer>

@code {
    private string SearchQuery { get; set; } = string.Empty;
    private string userType = "Basic"; // Default to Basic
    private bool isUpgradeModalVisible = false;
    private string userFirstName = string.Empty;
    private bool isUserLoggedIn = false;
    private List<SearchableItem> searchableItems = new();
    private List<SearchableItem> searchResults = new();
    private string EmergencyContact { get; set; } = string.Empty;
    private class UserProfile
    {
        public string emergencyContact { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;

        // Initial authentication check
        await UpdateAuthenticationStateAsync();
    }

        protected override void OnInitialized()
    {
        PopulateSearchableItems();
    }

    private async Task UpdateAuthenticationStateAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            isUserLoggedIn = true;
            userType = user.FindFirst(c => c.Type == "UserType")?.Value ?? "Basic";
            userFirstName = user.FindFirst(c => c.Type == ClaimTypes.GivenName)?.Value ?? "User";
        }
        else
        {
            isUserLoggedIn = false;
            userFirstName = string.Empty; // Clear user name
            userType = "Basic"; // Reset user type
        }
        await FetchEmergencyContactAsync();
        StateHasChanged(); // Refresh UI
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        await UpdateAuthenticationStateAsync();
    }

    private void ShowUpgradeModal()
    {
        isUpgradeModalVisible = true;
    }

    private void CloseUpgradeModal()
    {
        isUpgradeModalVisible = false;
    }

    private void UpgradeToPremium()
    {
        NavigationManager.NavigateTo("/services");
    }

    private void PopulateSearchableItems()
    {
        // Static items (Features, General App Sections)
        searchableItems = new List<SearchableItem>
        {
            new SearchableItem 
            { 
                Category = "Feature", 
                Title = "Health Overview", 
                Description = "Health overview including graphs, blood type, height, weight, and health tracking.", 
                NavigationPath = "/health-overview" 
            },
            new SearchableItem 
            { 
                Category = "Feature", 
                Title = "Mole Tracking", 
                Description = "Mole tracking with images, calendar, time-based tracking, upload functionality, and analysis of color, shape, and size.", 
                NavigationPath = "/mole-tracking" 
            },
            new SearchableItem 
            { 
                Category = "Feature", 
                Title = "Image Analysis", 
                Description = "Image analysis for X-rays, MRIs, tumor detection, anomalies, scans, and highlighting specific zones.", 
                NavigationPath = "/image-analysis" 
            },
            new SearchableItem 
            { 
                Category = "Feature", 
                Title = "Alerts", 
                Description = "Alerts, notifications, and reminders to keep you updated on your health activities.", 
                NavigationPath = "/alerts" 
            },
            new SearchableItem 
            { 
                Category = "General", 
                Title = "Profile", 
                Description = "User profile management including account settings, personal information, bio, and preferences.", 
                NavigationPath = "/profile" 
            },
            new SearchableItem 
            { 
                Category = "General", 
                Title = "FAQ", 
                Description = "Frequently asked questions about health tracking, app functionality, troubleshooting, and common issues.", 
                NavigationPath = "/faq" 
            },
            new SearchableItem 
            { 
                Category = "General", 
                Title = "Services", 
                Description = "Explore our services, upgrade to premium, and unlock advanced features like medical image analysis.", 
                NavigationPath = "/upgrade-process" 
            },
            new SearchableItem 
            { 
                Category = "General", 
                Title = "About", 
                Description = "Learn about our mission, team, and commitment to providing innovative health tracking solutions.", 
                NavigationPath = "/about" 
            }
        };

        // Optionally, add user-specific data here dynamically later (e.g., health records)
    }

    // SearchableItem class for global search data structure
    public class SearchableItem
    {
        public string Category { get; set; } // e.g., "Feature", "Tip"
        public string Title { get; set; }    // Display title
        public string Description { get; set; } // Brief description
        public string NavigationPath { get; set; } // Navigation path
    }

    private void PerformSearch()
    {
        if (!string.IsNullOrWhiteSpace(SearchQuery))
        {
            searchResults = searchableItems
                .Where(item => item.Title.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase) || 
                            item.Description.Contains(SearchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        else
        {
            searchResults.Clear();
        }
    }

    private void OnSearch()
    {
    Console.WriteLine($"Search Query: {SearchQuery}");
    PerformSearch();
    }
    private void OnClear()
    {
        SearchQuery = string.Empty;
        searchResults.Clear();
        Console.WriteLine("Clear button clicked!");
    }
    private void NavigateTo(string path)
    {
        NavigationManager.NavigateTo(path);
    }

    private async Task FetchEmergencyContactAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var userId = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

            if (int.TryParse(userId, out int parsedUserId))
            {
                try
                {
                    var client = HttpClientFactory.CreateClient("HealthAppAPI");
                    var response = await client.GetAsync($"user/profile/{parsedUserId}");

                    if (response.IsSuccessStatusCode)
                    {
                        var profileData = await response.Content.ReadFromJsonAsync<UserProfile>();
                        EmergencyContact = profileData?.emergencyContact ?? string.Empty;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error fetching emergency contact: {ex.Message}");
                }
            }
        }
        else
        {
            EmergencyContact = string.Empty; // Clear emergency contact if user is not authenticated
        }
    }
    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }

        private void LogEmergencyContact()
    {
        Console.WriteLine($"Emergency Contact: {EmergencyContact}");
    }
}
