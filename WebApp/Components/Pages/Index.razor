@page "/"
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject CustomAuthenticationStateProvider AuthProvider
@inject NavigationManager NavigationManager
@using WebApp.Components

<!-- Search Bar -->
<div class="search-bar">
    <input 
        @bind-value="SearchQuery" 
        class="search-input" 
        placeholder="What are you looking for?" 
    />
    <button 
        class="btn btn-primary" 
        @onclick="OnSearch"
    >
        <i class="fas fa-search"></i> Search
    </button>
    <button 
        class="btn btn-secondary" 
        @onclick="OnClear"
    >
        <i class="fas fa-times"></i> Clear
    </button>
</div>

<!-- Welcome Message -->
@if (!string.IsNullOrEmpty(userFirstName))
{
    <div class="welcome-message">
        <h2>Welcome, @userFirstName!</h2>
    </div>
}

<!-- Feature Icons Grid -->
<div class="custom-grid">
    <div class="grid-item blue">
        <a href="/health-overview">
            <img src="images/health-graph-icon.png" alt="Health Overview" />
        </a>
    </div>
    <div class="grid-item yellow">
        <a href="/mole-tracking">
            <img src="images/mole-icon.png" alt="Mole Tracking" class="custom-img" />
        </a>
    </div>

    <!-- Conditional rendering for Medical Image access -->
    <div class="grid-item green @(userType == "Basic" ? "grayed-out" : "")">
        @if (userType == "Premium")
        {
            <a href="/image-analysis">
                <img src="images/medical-image-icon.png" alt="Image Analysis" class="custom-img" />
            </a>
        }
        else if (userType == "Basic")
        {
            <div class="grid-item green disabled-feature" @onclick="ShowUpgradeModal">
                <div class="ribbon">Go Premium</div>
                <img src="images/medical-image-icon.png" alt="Medical Images" class="custom-img" />
            </div>
        }
    </div>

    <div class="grid-item red">
        <a href="/alerts">
            <img src="images/health-alert-icon.png" alt="Alerts" class="custom-img" />
        </a>
    </div>
</div>

<!-- Emergency Call Button -->
<div class="emergency-call">
    <a href="tel:112" class="btn btn-danger emergency-button">
        Emergency Call <i class="fas fa-phone"></i>
    </a>
</div>

<!-- Testing Buttons -->
<div class="test-login">
    <button class="btn test-button basic-user-button" @onclick='() => SimulateLogin("Basic")'>Login as Basic User</button>
    <button class="btn test-button premium-user-button" @onclick='() => SimulateLogin("Premium")'>Login as Premium User</button>
    <button class="btn test-button go-to-testing-page-button" @onclick="GoToTestingPage">Go to Testing Page</button>
</div>


@if (isUpgradeModalVisible)
{
    <UpgradeModal 
        OnClose="CloseUpgradeModal" 
        OnUpgrade="UpgradeToPremium" 
    />
}


<!-- Footer -->
<footer class="footer">
    <p>&copy; @DateTime.Now.Year Mobile Health App</p>
</footer>

@code {
    private string SearchQuery { get; set; } = string.Empty;
    private string userType = "Basic"; // Default to Basic
    private bool isUpgradeModalVisible = false;
    private string userFirstName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var claims = authState.User.Claims;

        userType = claims.FirstOrDefault(c => c.Type == "UserType")?.Value ?? "Basic";
        userFirstName = claims.FirstOrDefault(c => c.Type == ClaimTypes.GivenName)?.Value ?? "User";

        StateHasChanged();
    }

    private async Task SimulateLogin(string userTypeToSimulate)
    {
        await AuthProvider.SimulateLogin(userTypeToSimulate);
        userType = userTypeToSimulate; // Update the user type
        StateHasChanged(); // Refresh the UI
    }

    private void ShowUpgradeModal()
    {
        isUpgradeModalVisible = true;
    }

    private void CloseUpgradeModal()
    {
        isUpgradeModalVisible = false;
    }

    private void UpgradeToPremium()
    {
        NavigationManager.NavigateTo("/upgrade-process");
    }

    private void OnSearch()
    {
        Console.WriteLine($"Searching for: {SearchQuery}");
    }

    private void OnClear()
    {
        SearchQuery = string.Empty;
        Console.WriteLine("Clear button clicked!");
    }
    private void GoToTestingPage()
    {
        NavigationManager.NavigateTo("/testing");
    }
}
