@page "/edit-medical-data"
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager Navigation
@inject CustomAuthenticationStateProvider AuthenticationStateProvider

<div class="edit-medical-data-container">
    <h1 class="page-title">Edit Medical Data</h1>
    <div class="info-box-medical-box">
        <EditForm Model="@medicalDataModel" OnValidSubmit="@SaveMedicalData">
            <DataAnnotationsValidator />
            <Microsoft.AspNetCore.Components.Forms.ValidationSummary />

            <h2 class="section-title">Personal Information</h2>
            <div class="form-group">
                <label for="Weight">Weight</label>
                <InputNumber id="weight" class="form-control" @bind-Value="medicalDataModel.Weight" />
            </div>
            <div class="form-group">
                <label for="Height">Height</label>
                <InputNumber id="height" class="form-control" @bind-Value="medicalDataModel.Height" />
            </div>
            <div class="form-group">
                <label for="BloodType">Blood Type</label>
                <InputText id="bloodType" class="form-control" @bind-Value="medicalDataModel.BloodType" />
            </div>

            <hr />

            <h2 class="section-title">Habits</h2>
            <div class="form-group">
                <label for="Smoking">Smoking</label>
                <InputCheckbox id="smoking" class="form-check-input" @bind-Value="medicalDataModel.Smoking" />
            </div>
            <div class="form-group">
                <label for="Alcohol">Alcohol Consumption</label>
                <InputSelect id="alcohol" class="form-control" @bind-Value="medicalDataModel.Alcohol">
                    @foreach (var option in Enum.GetValues<AlcoholConsumption>())
                    {
                        <option value="@option">@option</option>
                    }
                </InputSelect>
            </div>

            <hr />

            <h2 class="section-title">Allergies</h2>
            <div class="form-group">
                <label>Common Allergies</label>
                <div class="form-check">
                    <InputCheckbox class="form-check-input" @bind-Value="medicalDataModel.PeanutsAllergy" />
                    <label class="form-check-label">Peanuts</label>
                </div>
                <div class="form-check">
                    <InputCheckbox class="form-check-input" @bind-Value="medicalDataModel.ShellfishAllergy" />
                    <label class="form-check-label">Shellfish</label>
                </div>
                <div class="form-check">
                    <InputCheckbox class="form-check-input" @bind-Value="medicalDataModel.DairyAllergy" />
                    <label class="form-check-label">Dairy</label>
                </div>
                <div class="form-check">
                    <InputCheckbox class="form-check-input" @bind-Value="medicalDataModel.GlutenAllergy" />
                    <label class="form-check-label">Gluten</label>
                </div>
                <div class="form-check">
                    <InputCheckbox class="form-check-input" @bind-Value="medicalDataModel.PollenAllergy" />
                    <label class="form-check-label">Pollen</label>
                </div>
            </div>
            <div class="form-group">
                <label for="OtherAllergies">Other Allergies</label>
                <InputText id="OtherAllergies" class="form-control" @bind-Value="medicalDataModel.OtherAllergies" placeholder="Specify other allergies" />
            </div>

            <button type="submit" class="btn btn-primary save-btn">Save Changes</button>
        </EditForm>
    </div>
</div>

@code {
    private MedicalData medicalDataModel = new()
    {
        Weight = null,
        Height = null,
        BloodType = null,
        Smoking = false,
        Alcohol = AlcoholConsumption.Never,
        PeanutsAllergy = false,
        ShellfishAllergy = false,
        DairyAllergy = false,
        GlutenAllergy = false,
        PollenAllergy = false,
        OtherAllergies = null
    };

    private int userId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            var userIdString = user.FindFirst(c => c.Type == ClaimTypes.NameIdentifier)?.Value;

            if (int.TryParse(userIdString, out int parsedUserId))
            {
                userId = parsedUserId;
                medicalDataModel.UserId = userId; // Assign the UserId to the medicalDataModel
            }
        }
    }

    private async Task SaveMedicalData()
    {
        var client = HttpClientFactory.CreateClient("HealthAppAPI");
        var response = await client.PostAsJsonAsync($"MedicalData/save?userId={userId}", medicalDataModel);
        if (response.IsSuccessStatusCode)
        {
            medicalDataModel = await response.Content.ReadFromJsonAsync<MedicalData>();
            Console.WriteLine($"Medical data saved with ID: {medicalDataModel.MedicalDataID}");
            Navigation.NavigateTo("/profile");
        }
        else
        {
            Console.WriteLine("Error saving medical data.");
        }
    }

    private class MedicalData
    {
        public int MedicalDataID { get; set; } // Primary Key
        public int UserId { get; set; } // Foreign Key
        public float? Weight { get; set; }
        public float? Height { get; set; }
        public string? BloodType { get; set; }
        public bool Smoking { get; set; }
        public AlcoholConsumption Alcohol { get; set; }
        public bool PeanutsAllergy { get; set; }
        public bool ShellfishAllergy { get; set; }
        public bool DairyAllergy { get; set; }
        public bool GlutenAllergy { get; set; }
        public bool PollenAllergy { get; set; }
        public string? OtherAllergies { get; set; }
    }

    private enum AlcoholConsumption
    {
        Never,
        Occasionally,
        Frequently
    }
}