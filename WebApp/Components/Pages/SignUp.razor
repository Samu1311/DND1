@page "/signup"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@rendermode RenderMode.InteractiveServer

<div class="signup-container">
    <h1 class="signup-title">Sign Up</h1>
    <div class="form-container">
        <EditForm Model="@signUpModel" OnValidSubmit="HandleSignUp" formname="SignUpForm">
            <DataAnnotationsValidator />
            <Microsoft.AspNetCore.Components.Forms.ValidationSummary />

            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="signUpModel.Email" />
                <ValidationMessage For="@(() => signUpModel.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="signUpModel.Password" />
                <ValidationMessage For="@(() => signUpModel.Password)" />
            </div>

            <div class="form-group">
                <label for="confirm-password">Confirm Password</label>
                <InputText id="confirm-password" type="password" class="form-control" @bind-Value="signUpModel.ConfirmPassword" />
                <ValidationMessage For="@(() => signUpModel.ConfirmPassword)" />
            </div>

            <div class="form-group">
                <label for="first-name">First Name</label>
                <InputText id="first-name" class="form-control" @bind-Value="signUpModel.FirstName" />
                <ValidationMessage For="@(() => signUpModel.FirstName)" />
            </div>

            <div class="form-group">
                <label for="last-name">Last Name</label>
                <InputText id="last-name" class="form-control" @bind-Value="signUpModel.LastName" />
                <ValidationMessage For="@(() => signUpModel.LastName)" />
            </div>

            <div class="form-group">
                <label for="date-of-birth">Date of Birth</label>
                <InputDate id="date-of-birth" class="form-control" @bind-Value="signUpModel.DateOfBirth" />
                <ValidationMessage For="@(() => signUpModel.DateOfBirth)" />
            </div>

            <div class="form-group">
                <label for="gender">Gender</label>
                <InputSelect id="gender" class="form-control" @bind-Value="signUpModel.Gender">
                    <option value="" disabled>Select your gender</option>
                    <option value="Male">Male</option>
                    <option value="Female">Female</option>
                    <option value="Other">Other</option>
                </InputSelect>
                <ValidationMessage For="@(() => signUpModel.Gender)" />
            </div>

            <div class="button-group">
                <button type="submit" class="btn btn-primary">Sign Up</button>
                <a href="/login" class="btn btn-secondary">Login</a>
            </div>
        </EditForm>

        @if (!string.IsNullOrEmpty(SignUpErrorMessage))
        {
            <div class="error-message">@SignUpErrorMessage</div>
        }
    </div>
</div>

@code {
    public class SignUpModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long")]
        public string Password { get; set; } = string.Empty;

        [Compare("Password", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "First name is required")]
        public string FirstName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Last name is required")]
        public string LastName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Date of Birth is required")]
        public DateTime? DateOfBirth { get; set; }

        [Required(ErrorMessage = "Gender is required")]
        public string Gender { get; set; } = string.Empty;
    }
    private SignUpModel signUpModel = new();

    private string SignUpErrorMessage = string.Empty;

@code {
    private async Task HandleSignUp()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("HealthAppAPI");

            // Prepare user data payload
            var payload = new
            {
                Email = signUpModel.Email,
                PasswordHash = signUpModel.Password, // Mapped to backend's PasswordHash
                FirstName = signUpModel.FirstName,
                LastName = signUpModel.LastName,
                DateOfBirth = signUpModel.DateOfBirth,
                Gender = signUpModel.Gender
            };

            // Send POST request to the API
            var response = await client.PostAsJsonAsync("user", payload);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("User created successfully.");
                NavigationManager.NavigateTo("/login");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Sign-up failed: {error}");
                SignUpErrorMessage = "An error occurred during sign-up. Please try again.";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
            SignUpErrorMessage = "An unexpected error occurred. Please try again.";
        }
    }
}


}
