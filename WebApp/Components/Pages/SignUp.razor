@page "/signup"
@using System.ComponentModel.DataAnnotations

<div class="signup-container">
    <h1 class="signup-title">Sign Up</h1>
    <div class="form-container">
        <EditForm Model="@signUpModel" OnValidSubmit="HandleSignUp">
            <DataAnnotationsValidator />
            <Microsoft.AspNetCore.Components.Forms.ValidationSummary />

            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="signUpModel.Email" />
                <ValidationMessage For="@(() => signUpModel.Email)" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="signUpModel.Password" />
                <ValidationMessage For="@(() => signUpModel.Password)" />
            </div>

            <div class="form-group">
                <label for="confirm-password">Confirm Password</label>
                <InputText id="confirm-password" type="password" class="form-control" @bind-Value="signUpModel.ConfirmPassword" />
                <ValidationMessage For="@(() => signUpModel.ConfirmPassword)" />
            </div>

            <div class="button-group">
                <button type="submit" class="btn btn-primary">Sign Up</button>
                <a href="/login" class="btn btn-secondary">Login</a>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private SignUpModel signUpModel = new();

    private void HandleSignUp()
    {
        Console.WriteLine($"Signing up as {signUpModel.Email}");
        // Add your registration logic here (e.g., API call)
    }

    public class SignUpModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long")]
        public string Password { get; set; } = string.Empty;

        [Compare("Password", ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}
