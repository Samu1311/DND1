@page "/signup"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject IHttpClientFactory HttpClientFactory
@rendermode RenderMode.InteractiveServer

<div class="signup-container">
    <h1 class="signup-title">Sign Up</h1>
    <div class="form-container">
        <EditForm Model="@signUpModel" OnValidSubmit="HandleSignUp" formname="SignUpForm">
            <DataAnnotationsValidator />
            <Microsoft.AspNetCore.Components.Forms.ValidationSummary />

            <div class="form-group">
                <label for="firstName">First Name</label>
                <InputText id="firstName" class="form-control" @bind-Value="signUpModel.FirstName" />
                <ValidationMessage For="@(() => signUpModel.FirstName)" />
            </div>

            <div class="form-group">
                <label for="lastName">Last Name</label>
                <InputText id="lastName" class="form-control" @bind-Value="signUpModel.LastName" />
                <ValidationMessage For="@(() => signUpModel.LastName)" />
            </div>

            <div class="form-group">
                <label for="email">Email</label>
                <InputText id="email" class="form-control" @bind-Value="signUpModel.Email" />
                <ValidationMessage For="@(() => signUpModel.Email)" />
            </div>

            <div class="form-group">
                <label for="phone">Phone Number</label>
                <InputText id="phone" class="form-control" @bind-Value="signUpModel.PhoneNumber" />
                <ValidationMessage For="@(() => signUpModel.PhoneNumber)" />
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <InputText id="password" type="password" class="form-control" @bind-Value="signUpModel.PasswordHash" />
                <ValidationMessage For="@(() => signUpModel.PasswordHash)" />
            </div>

            <div class="form-group">
                <label for="dateOfBirth">Date of Birth</label>
                <InputDate id="dateOfBirth" class="form-control" @bind-Value="signUpModel.DateOfBirth" />
                <ValidationMessage For="@(() => signUpModel.DateOfBirth)" />
            </div>

            <div class="form-group">
                <label for="gender">Gender</label>
                <InputText id="gender" class="form-control" @bind-Value="signUpModel.Gender" />
                <ValidationMessage For="@(() => signUpModel.Gender)" />
            </div>

            <div class="form-group">
                <label for="emergencyContact">Emergency Contact</label>
                <InputText id="emergencyContact" class="form-control" @bind-Value="signUpModel.EmergencyContact" />
                <ValidationMessage For="@(() => signUpModel.EmergencyContact)" />
            </div>

            <div class="button-group">
                <button type="submit" class="btn btn-primary">Sign Up</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private SignUpModel signUpModel = new SignUpModel();

    private async Task HandleSignUp()
    {
        var client = HttpClientFactory.CreateClient("HealthAppAPI");
        var response = await client.PostAsJsonAsync("user/register", signUpModel);

        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/login");
        }
        else
        {
            Console.WriteLine("Registration failed!");
            // Optionally, display an error message here
        }
    }

    public class SignUpModel
    {
        [Required]
        public string FirstName { get; set; } = string.Empty;

        [Required]
        public string LastName { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        [Phone]
        public string PhoneNumber { get; set; } = string.Empty;

        [Required]
        [MinLength(6)]
        public string PasswordHash { get; set; } = string.Empty; // Match backend naming

        public DateTime? DateOfBirth { get; set; }

        public string? Gender { get; set; }

        [Required]
        [Phone]
        public string EmergencyContact { get; set; } = string.Empty;
    }

}
