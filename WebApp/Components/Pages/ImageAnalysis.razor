@page "/image-analysis"
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpClientFactory
@using System.Text.Json
@implements IDisposable

<div class="image-analysis-container">
    <h1 class="page-title">Medical Image Analysis</h1>
    <p class="instructions">Upload your MRI or CT scans to preview and later send them for analysis.</p>

    <div class="upload-section">
        <!-- Drag-and-drop area -->
        <div class="file-drop-box drag-drop-area">
            <p class="drop-text">Drag and drop your image here or click to select a file</p>
        </div>

        <div class="button-group">
            <!-- Hidden InputFile for file selection -->
            <InputFile id="fileInput" class="file-input" style="display: none;" OnChange="HandleFileChange" />
            <button class="btn btn-reset" @onclick="Reset">Reset</button>
            <button class="btn btn-upload" @onclick="UploadFile" disabled="@(!canUpload)">Upload</button>
        </div>
    </div>

    @if (isLoading)
    {
        <div>
            <p>Uploading and analyzing image...</p>
            <div class="spinner"></div>
        </div>
    }

    @if (!string.IsNullOrEmpty(previewImagePath))
    {
        <div>
            <h3>Preview:</h3>
            <img src="@previewImagePath" alt="Uploaded scan preview" class="preview-image" />
        </div>
    }

    @if (!string.IsNullOrEmpty(uploadedImagePath))
    {
        <div>
            <h3>Analyzed Image:</h3>
            <img src="@uploadedImagePath" alt="Uploaded scan preview" class="preview-image" />
        </div>
    }
</div>

@code {
    private IBrowserFile? selectedFile;
    private string? previewImagePath; // Path for previewing the image
    private string? uploadedImagePath; // Path of the uploaded image
    private bool isLoading = false;
    private bool canUpload = false; // Indicates if the Upload button is enabled

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeDragAndDrop");
        }
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File; // Capture the selected file
        Console.WriteLine($"File selected: {selectedFile.Name}");

        // Generate a preview for the uploaded image
        using var stream = selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10 MB limit
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);
        previewImagePath = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(memoryStream.ToArray())}";

        canUpload = true; // Enable the Upload button
        StateHasChanged(); // Trigger UI update
    }

    private async Task UploadFile()
{
    if (selectedFile == null)
    {
        Console.WriteLine("No file selected for upload.");
        return;
    }

    isLoading = true;

    try
    {
        using var content = new MultipartFormDataContent();
        var fileStream = selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10 MB limit
        content.Add(new StreamContent(fileStream), "file", selectedFile.Name);

        using var httpClient = new HttpClient
        {
            BaseAddress = new Uri("http://localhost:5146/api/")
        };

        var response = await httpClient.PostAsync("ImageAnalysis/upload", content);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<UploadResult>();
            uploadedImagePath = result?.FilePath;
            Console.WriteLine($"File uploaded successfully: {uploadedImagePath}");
        }
        else
        {
            Console.WriteLine($"File upload failed: {response.StatusCode}");
        }
    }
    catch (Exception ex)
    {
        Console.WriteLine($"Error during upload: {ex.Message}");
    }
    finally
    {
        isLoading = false;
        StateHasChanged();
    }
}


    private void Reset()
    {
        selectedFile = null;
        previewImagePath = null;
        uploadedImagePath = null;
        canUpload = false;
        isLoading = false;

        Console.WriteLine("Reset complete.");
        StateHasChanged(); // Trigger UI update
    }

    public void Dispose()
    {
        // Cleanup if needed
    }

    private class UploadResult
    {
        public string? FilePath { get; set; }
    }
}
