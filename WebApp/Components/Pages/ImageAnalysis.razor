@page "/image-analysis"
@inject IJSRuntime JSRuntime
@inject IHttpClientFactory HttpClientFactory

<div class="image-analysis-container">
    <h1 class="page-title">Medical Image Analysis</h1>
    <p class="instructions">Upload your MRI or CT scans to preview and later send them for analysis.</p>

    <div class="upload-section">
        <div class="file-drop-box drag-drop-area">
            <p class="drop-text">Drag and drop your image here or click to select a file</p>
            <InputFile id="fileInput" class="file-input" style="display: none;" OnChange="HandleFileChange" />
        </div>

        <div class="button-group">
            <button class="btn btn-reset" type="button" @onclick="Reset">Reset</button>
            <button class="btn btn-upload" type="button" @onclick="UploadFile" disabled="@(!canUpload)">Upload</button>
        </div>
    </div>

    <!-- Preview Section -->
    @if (!string.IsNullOrEmpty(previewImagePath))
    {
        <div>
            <h3>Preview:</h3>
            <img src="@previewImagePath" alt="Preview of the selected image" class="preview-image" />
        </div>
    }

    <!-- Pop-Up Notification -->
    @if (isPopUpVisible)
    {
        <div class="popup">
            @if (popUpStage == "upload-success")
            {
                <p>Upload Successful!</p>
            }
            else if (popUpStage == "analyzing")
            {
                <p>Analyzing...</p>
                <div class="spinner">
                <div></div>
                <div></div>
                <div></div>
                </div>
            }
        </div>
    }

    <!-- Analyzing Result -->
    @if (showAnalyzedImage)
    {
        <div class="analyzing-result">
            <h3>Analysis Successful</h3>
            <img src="@analyzedImagePath" alt="Analyzed Image" class="preview-image" />
        </div>
    }
</div>

@code {
    private IBrowserFile? selectedFile;
    private string? previewImagePath;
    private string? analyzedImagePath;
    private bool canUpload = false;

    private bool isPopUpVisible = false;
    private string popUpStage = "upload-success";
    private bool showAnalyzedImage = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeDragAndDrop");
        }
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;

        using var stream = selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024);
        using var memoryStream = new MemoryStream();
        await stream.CopyToAsync(memoryStream);

        previewImagePath = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(memoryStream.ToArray())}";
        analyzedImagePath = previewImagePath; // Simulating analyzed image
        canUpload = true;

        Console.WriteLine("Preview image set successfully.");
        StateHasChanged();
    }

    private async Task UploadFile()
    {
        if (selectedFile == null)
        {
            Console.WriteLine("No file selected for upload.");
            return;
        }

        try
        {
            Console.WriteLine("Starting file upload...");

            // Simulate file saving
            var filePath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", "UploadedImages", selectedFile.Name);
            Directory.CreateDirectory(Path.GetDirectoryName(filePath)!);

            using var fileStream = new FileStream(filePath, FileMode.Create);
            await selectedFile.OpenReadStream().CopyToAsync(fileStream);

            Console.WriteLine($"File saved locally at {filePath}");

            // Display Pop-Up
            isPopUpVisible = true;
            popUpStage = "upload-success";
            StateHasChanged();
            await Task.Delay(500); // Wait 0.5 seconds

            popUpStage = "analyzing";
            StateHasChanged();
            await Task.Delay(3000); // Wait 2 seconds

            // Hide pop-up and show analyzed image
            isPopUpVisible = false;
            showAnalyzedImage = true;
            previewImagePath = null;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during file upload: {ex.Message}");
        }
    }

    private void Reset()
    {
        selectedFile = null;
        previewImagePath = null;
        analyzedImagePath = null;
        canUpload = false;
        isPopUpVisible = false;
        showAnalyzedImage = false;
    }
}
